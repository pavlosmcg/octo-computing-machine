/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // D register - only load if C instruction and d2 is asserted
    And(a=instruction[15],b=instruction[4],out=loadd);
    DRegister(in=aluout,load=loadd,out=d);
    
    // ALU - use A register value for y when 'c' bit is zero, otherwise use inM for y
    Mux16(a=a,b=inM,sel=instruction[12],out=y);
    ALU(x=d,y=y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        zr=zr,ng=ng,out=aluout,out=outM);
    
    // A register - only load if A instruction or d1 is asserted
    Not(in=instruction[5],out=notd1);
    Nand(a=instruction[15],b=notd1,out=loada);
    // choose between loading the A register with output of ALU (if C instruction) or address from A instruction
    Mux16(a=instruction,b=aluout,sel=instruction[15],out=areginput);
    ARegister(in=areginput,load=loada,out=a,out[0..14]=addressM[0..14]);
    
    // writeM output - true if C instruction and d3 is asserted
    And(a=instruction[15],b=instruction[3],out=writeM);
    
    // Jump logic - output is asserted if a jump should be made
    Jump(j1=instruction[2],j2=instruction[1],j3=instruction[0],ng=ng,zr=zr,out=jump);
    
    // PC - only load value from A register if C instruction and jump condition is met. Otherwise, the counter will be routinely incremented. 
    And(a=instruction[15],b=jump,out=loadpc);
    Not(in=loadpc,out=incpc);
    PC(in=a,load=loadpc,inc=incpc,reset=reset,out[0..14]=pc[0..14]);
}