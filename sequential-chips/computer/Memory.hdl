/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behaviour in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // First DMux to find out whether to load regular memory or I/O
    DMux(in=load,sel=address[14],a=loadmem,b=loadio);
	
    // Load memory or IO
    RAM16K(in=in,out=outmem,load=loadmem,address=address[0..13]);
    Screen(in=in,out=outscreen,load=loadio,address=address[0..12]);
	
    // Mux to select the output
    Keyboard(out=outkbd);
    Mux16(a=outscreen,b=outkbd,sel=address[13],out=outio);
    Mux16(a=outmem,b=outio,sel=address[14],out=out);
}